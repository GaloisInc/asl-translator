(AslDefinitions
  (DefCallable
    (QualifiedIdentifier Any BVMul)
    (list
      (SymDecl
        bv1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        bv2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N)))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any primitive)
                (list
                  (ExprBinOp
                    "*"
                    (ExprVarRef
                      (QualifiedIdentifier Any bv1))
                    (ExprVarRef
                      (QualifiedIdentifier Any bv2)))))))))))
  (DefCallable
    (QualifiedIdentifier Any IntMul)
    (list
      (SymDecl
        i1
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        i2
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any integer)))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any primitive)
                (list
                  (ExprBinOp
                    "*"
                    (ExprVarRef
                      (QualifiedIdentifier Any i1))
                    (ExprVarRef
                      (QualifiedIdentifier Any i2)))))))))))
  (DefCallable
    (QualifiedIdentifier Any IntMod)
    (list
      (SymDecl
        i1
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        i2
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any integer)))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any primitive)
                (list
                  (ExprBinOp
                    "MOD"
                    (ExprVarRef
                      (QualifiedIdentifier Any i1))
                    (ExprVarRef
                      (QualifiedIdentifier Any i2)))))))))))
  (DefCallable
    (QualifiedIdentifier Any IntDiv)
    (list
      (SymDecl
        i1
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        i2
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any integer)))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any primitive)
                (list
                  (ExprBinOp
                    "/"
                    (ExprVarRef
                      (QualifiedIdentifier Any i1))
                    (ExprVarRef
                      (QualifiedIdentifier Any i2)))))))))))
  (DefCallable
    (QualifiedIdentifier Any integerToSBV)
    (list
      (SymDecl
        i
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "uu_integerToSBV")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any i))))))))))
  (DefCallable
    (QualifiedIdentifier Any integerSizeBoundS)
    (list
      (SymDecl
        i
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        x
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N)))))
    Nothing
    (Just
      (StmtBlock
        (list
          (StmtVarDeclInit
            (SymDecl
              y
              (TypeFun
                bits
                (ExprVarRef
                  (QualifiedIdentifier Any N))))
            (ExprCall
              (QualifiedIdentifier Any integerToSBV)
              (list
                (ExprVarRef
                  (QualifiedIdentifier Any i)))))
          (StmtAssert
            (ExprBinOp
              "=="
              (ExprVarRef
                (QualifiedIdentifier Any x))
              (ExprVarRef
                (QualifiedIdentifier Any y))))
          (StmtReturn Nothing)))))
  (DefCallable
    (QualifiedIdentifier Any truncate)
    (list
      (SymDecl
        bv
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        M
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any M))))))
    Nothing)
  (DefCallable
    (QualifiedIdentifier Any log2)
    (list
      (SymDecl
        i
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any integer)))))
    Nothing)
  (DefCallable
    (QualifiedIdentifier Any getSliceUF)
    (list
      (SymDecl
        inbv
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        signed
        (TypeRef
          (QualifiedIdentifier Any boolean)))
      (SymDecl
        lo
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        hi
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any length))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprBinOp
              "<="
              (ExprVarRef
                (QualifiedIdentifier Any length))
              (ExprVarRef
                (QualifiedIdentifier Any N))))
          (StmtAssert
            (ExprBinOp
              ">="
              (ExprVarRef
                (QualifiedIdentifier Any length))
              (ExprLitNat 1)))
          (StmtAssert
            (ExprBinOp
              ">="
              (ExprVarRef
                (QualifiedIdentifier Any hi))
              (ExprVarRef
                (QualifiedIdentifier Any lo))))
          (StmtAssert
            (ExprBinOp
              "<="
              (ExprVarRef
                (QualifiedIdentifier Any hi))
              (ExprVarRef
                (QualifiedIdentifier Any length))))
          (StmtAssert
            (ExprBinOp
              ">="
              (ExprVarRef
                (QualifiedIdentifier Any lo))
              (ExprLitNat 0)))
          (StmtAssert
            (ExprBinOp
              "<="
              (ExprBinOp
                "-"
                (ExprVarRef
                  (QualifiedIdentifier Any hi))
                (ExprVarRef
                  (QualifiedIdentifier Any lo)))
              (ExprVarRef
                (QualifiedIdentifier Any length))))
          (StmtVarDeclInit
            (SymDecl
              loBits
              (TypeFun
                bits
                (ExprBinOp
                  "+"
                  (ExprCall
                    (QualifiedIdentifier Any log2)
                    (list
                      (ExprVarRef
                        (QualifiedIdentifier Any N))))
                  (ExprLitNat 1))))
            (ExprCall
              (QualifiedIdentifier Any integerToSBV)
              (list
                (ExprVarRef
                  (QualifiedIdentifier Any lo)))))
          (StmtVarDeclInit
            (SymDecl
              hiBits
              (TypeFun
                bits
                (ExprBinOp
                  "+"
                  (ExprCall
                    (QualifiedIdentifier Any log2)
                    (list
                      (ExprVarRef
                        (QualifiedIdentifier Any N))))
                  (ExprLitNat 1))))
            (ExprCall
              (QualifiedIdentifier Any integerToSBV)
              (list
                (ExprVarRef
                  (QualifiedIdentifier Any hi)))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "getSlice")
                  (ExprLitNat 2)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any length))
                  (ExprVarRef
                    (QualifiedIdentifier Any inbv))
                  (ExprVarRef
                    (QualifiedIdentifier Any signed))
                  (ExprVarRef
                    (QualifiedIdentifier Any loBits))
                  (ExprVarRef
                    (QualifiedIdentifier Any hiBits))))))))))
  (DefCallable
    (QualifiedIdentifier Any setSliceUF)
    (list
      (SymDecl
        basebv
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        lo
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        hi
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        asnbv
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any length)))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprBinOp
              "<="
              (ExprVarRef
                (QualifiedIdentifier Any length))
              (ExprVarRef
                (QualifiedIdentifier Any N))))
          (StmtAssert
            (ExprBinOp
              ">="
              (ExprVarRef
                (QualifiedIdentifier Any length))
              (ExprLitNat 1)))
          (StmtAssert
            (ExprBinOp
              ">="
              (ExprVarRef
                (QualifiedIdentifier Any hi))
              (ExprVarRef
                (QualifiedIdentifier Any lo))))
          (StmtAssert
            (ExprBinOp
              "<="
              (ExprVarRef
                (QualifiedIdentifier Any hi))
              (ExprVarRef
                (QualifiedIdentifier Any length))))
          (StmtAssert
            (ExprBinOp
              ">="
              (ExprVarRef
                (QualifiedIdentifier Any lo))
              (ExprLitNat 0)))
          (StmtAssert
            (ExprBinOp
              "<="
              (ExprBinOp
                "-"
                (ExprVarRef
                  (QualifiedIdentifier Any hi))
                (ExprVarRef
                  (QualifiedIdentifier Any lo)))
              (ExprVarRef
                (QualifiedIdentifier Any length))))
          (StmtVarDeclInit
            (SymDecl
              loBits
              (TypeFun
                bits
                (ExprBinOp
                  "+"
                  (ExprCall
                    (QualifiedIdentifier Any log2)
                    (list
                      (ExprVarRef
                        (QualifiedIdentifier Any N))))
                  (ExprLitNat 1))))
            (ExprCall
              (QualifiedIdentifier Any integerToSBV)
              (list
                (ExprVarRef
                  (QualifiedIdentifier Any lo)))))
          (StmtVarDeclInit
            (SymDecl
              hiBits
              (TypeFun
                bits
                (ExprBinOp
                  "+"
                  (ExprCall
                    (QualifiedIdentifier Any log2)
                    (list
                      (ExprVarRef
                        (QualifiedIdentifier Any N))))
                  (ExprLitNat 1))))
            (ExprCall
              (QualifiedIdentifier Any integerToSBV)
              (list
                (ExprVarRef
                  (QualifiedIdentifier Any hi)))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "setSlice")
                  (ExprLitNat 2)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any length))
                  (ExprVarRef
                    (QualifiedIdentifier Any basebv))
                  (ExprVarRef
                    (QualifiedIdentifier Any loBits))
                  (ExprVarRef
                    (QualifiedIdentifier Any hiBits))
                  (ExprVarRef
                    (QualifiedIdentifier Any asnbv))))))))))
  (DefCallable
    (QualifiedIdentifier Any getSlice)
    (list
      (SymDecl
        inbv
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        signed
        (TypeRef
          (QualifiedIdentifier Any boolean)))
      (SymDecl
        lo
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        hi
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any length))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprBinOp
              "<="
              (ExprVarRef
                (QualifiedIdentifier Any length))
              (ExprVarRef
                (QualifiedIdentifier Any N))))
          (StmtAssert
            (ExprBinOp
              ">="
              (ExprVarRef
                (QualifiedIdentifier Any length))
              (ExprLitNat 1)))
          (StmtAssert
            (ExprBinOp
              ">="
              (ExprVarRef
                (QualifiedIdentifier Any hi))
              (ExprVarRef
                (QualifiedIdentifier Any lo))))
          (StmtAssert
            (ExprBinOp
              "<="
              (ExprVarRef
                (QualifiedIdentifier Any hi))
              (ExprVarRef
                (QualifiedIdentifier Any length))))
          (StmtAssert
            (ExprBinOp
              ">="
              (ExprVarRef
                (QualifiedIdentifier Any lo))
              (ExprLitNat 0)))
          (StmtAssert
            (ExprBinOp
              "<="
              (ExprBinOp
                "-"
                (ExprVarRef
                  (QualifiedIdentifier Any hi))
                (ExprVarRef
                  (QualifiedIdentifier Any lo)))
              (ExprVarRef
                (QualifiedIdentifier Any length))))
          (StmtVarDeclInit
            (SymDecl
              bv
              (TypeFun
                bits
                (ExprVarRef
                  (QualifiedIdentifier Any N))))
            (ExprVarRef
              (QualifiedIdentifier Any inbv)))
          (StmtIf
            (ExprVarRef
              (QualifiedIdentifier Any signed))
            (StmtBlock
              (list
                (StmtAssign
                  (LValVarRef
                    (QualifiedIdentifier Any bv))
                  (ExprCall
                    (QualifiedIdentifier Any primitive_ASR)
                    (list
                      (ExprVarRef
                        (QualifiedIdentifier Any bv))
                      (ExprVarRef
                        (QualifiedIdentifier Any lo)))))))
            (list)
            (Just
              (StmtBlock
                (list
                  (StmtAssign
                    (LValVarRef
                      (QualifiedIdentifier Any bv))
                    (ExprBinOp
                      ">>"
                      (ExprVarRef
                        (QualifiedIdentifier Any bv))
                      (ExprVarRef
                        (QualifiedIdentifier Any lo))))))))
          (StmtVarDeclInit
            (SymDecl
              mask
              (TypeFun
                bits
                (ExprVarRef
                  (QualifiedIdentifier Any N))))
            (ExprCall
              (QualifiedIdentifier Any Ones)
              (list
                (ExprVarRef
                  (QualifiedIdentifier Any N)))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any mask))
            (ExprCall
              (QualifiedIdentifier Any NOT)
              (list
                (ExprBinOp
                  "<<"
                  (ExprVarRef
                    (QualifiedIdentifier Any mask))
                  (ExprVarRef
                    (QualifiedIdentifier Any length))))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any bv))
            (ExprBinOp
              "AND"
              (ExprVarRef
                (QualifiedIdentifier Any bv))
              (ExprVarRef
                (QualifiedIdentifier Any mask))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any truncate)
                (list
                  (ExprVarRef
                    (QualifiedIdentifier Any bv))
                  (ExprVarRef
                    (QualifiedIdentifier Any length))))))))))
  (DefCallable
    (QualifiedIdentifier Any setSlice)
    (list
      (SymDecl
        basebv
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        lo
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        hi
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        asnbv
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any length)))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprBinOp
              "<="
              (ExprVarRef
                (QualifiedIdentifier Any length))
              (ExprVarRef
                (QualifiedIdentifier Any N))))
          (StmtAssert
            (ExprBinOp
              ">="
              (ExprVarRef
                (QualifiedIdentifier Any length))
              (ExprLitNat 1)))
          (StmtAssert
            (ExprBinOp
              ">="
              (ExprVarRef
                (QualifiedIdentifier Any hi))
              (ExprVarRef
                (QualifiedIdentifier Any lo))))
          (StmtAssert
            (ExprBinOp
              "<="
              (ExprVarRef
                (QualifiedIdentifier Any hi))
              (ExprVarRef
                (QualifiedIdentifier Any length))))
          (StmtAssert
            (ExprBinOp
              ">="
              (ExprVarRef
                (QualifiedIdentifier Any lo))
              (ExprLitNat 0)))
          (StmtAssert
            (ExprBinOp
              "<="
              (ExprBinOp
                "-"
                (ExprVarRef
                  (QualifiedIdentifier Any hi))
                (ExprVarRef
                  (QualifiedIdentifier Any lo)))
              (ExprVarRef
                (QualifiedIdentifier Any length))))
          (StmtVarDeclInit
            (SymDecl
              bv
              (TypeFun
                bits
                (ExprVarRef
                  (QualifiedIdentifier Any length))))
            (ExprVarRef
              (QualifiedIdentifier Any asnbv)))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any bv))
            (ExprBinOp
              "<<"
              (ExprVarRef
                (QualifiedIdentifier Any bv))
              (ExprBinOp
                "-"
                (ExprVarRef
                  (QualifiedIdentifier Any length))
                (ExprVarRef
                  (QualifiedIdentifier Any hi)))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any bv))
            (ExprBinOp
              ">>"
              (ExprVarRef
                (QualifiedIdentifier Any bv))
              (ExprBinOp
                "-"
                (ExprVarRef
                  (QualifiedIdentifier Any length))
                (ExprVarRef
                  (QualifiedIdentifier Any hi)))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any ebv))
            (ExprCall
              (QualifiedIdentifier Any ZeroExtend)
              (list
                (ExprCall
                  (QualifiedIdentifier Any NOT)
                  (list
                    (ExprVarRef
                      (QualifiedIdentifier Any bv))))
                (ExprVarRef
                  (QualifiedIdentifier Any N)))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any ebv))
            (ExprCall
              (QualifiedIdentifier Any NOT)
              (list
                (ExprBinOp
                  "<<"
                  (ExprVarRef
                    (QualifiedIdentifier Any ebv))
                  (ExprVarRef
                    (QualifiedIdentifier Any lo))))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any result))
            (ExprBinOp
              "AND"
              (ExprVarRef
                (QualifiedIdentifier Any basebv))
              (ExprVarRef
                (QualifiedIdentifier Any ebv))))
          (StmtReturn
            (Just
              (ExprVarRef
                (QualifiedIdentifier Any result))))))))
  (DefVariable
    (QualifiedIdentifier Any __AssertionFailure)
    (TypeRef
      (QualifiedIdentifier Any boolean)))
  (DefVariable
    (QualifiedIdentifier Any __EndOfInstruction)
    (TypeRef
      (QualifiedIdentifier Any boolean)))
  (DefVariable
    (QualifiedIdentifier Any __UndefinedBehavior)
    (TypeRef
      (QualifiedIdentifier Any boolean)))
  (DefVariable
    (QualifiedIdentifier Any __UnpredictableBehavior)
    (TypeRef
      (QualifiedIdentifier Any boolean)))
  (DefTypeAlias
    regidx
    (TypeFun
      bits
      (ExprLitNat 4)))
  (DefArray
    GPRS
    (TypeFun
      bits
      (ExprLitNat 32))
    (IxTypeRef regidx))
  (DefSetter
    (QualifiedIdentifier Any _R)
    (Just
      (list
        (SetterArg
          n
          (TypeRef
            (QualifiedIdentifier Any integer))
          Value)))
    (SymDecl
      value
      (TypeFun
        bits
        (ExprLitNat 32)))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprBinOp
              "&&"
              (ExprBinOp
                ">="
                (ExprVarRef
                  (QualifiedIdentifier Any n))
                (ExprLitNat 0))
              (ExprBinOp
                "<="
                (ExprVarRef
                  (QualifiedIdentifier Any n))
                (ExprLitNat 14))))
          (StmtVarDeclInit
            (SymDecl
              idx
              (TypeFun
                bits
                (ExprLitNat 37)))
            (ExprCall
              (QualifiedIdentifier Any integerToSBV)
              (list
                (ExprVarRef
                  (QualifiedIdentifier Any n)))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any GPRS))
            (ExprCall
              (QualifiedIdentifier Any uninterpFn)
              (list
                (ExprLitString "gpr_set")
                (ExprVarRef
                  (QualifiedIdentifier Any GPRS))
                (ExprCall
                  (QualifiedIdentifier Any truncate)
                  (list
                    (ExprVarRef
                      (QualifiedIdentifier Any idx))
                    (ExprLitNat 4)))
                (ExprVarRef
                  (QualifiedIdentifier Any value)))))
          (StmtReturn Nothing)))))
  (DefGetter
    (QualifiedIdentifier Any _R)
    (Just
      (list
        (SymDecl
          n
          (TypeRef
            (QualifiedIdentifier Any integer)))))
    (ReturnType
      (list
        (TypeFun
          bits
          (ExprLitNat 32))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprBinOp
              "&&"
              (ExprBinOp
                ">="
                (ExprVarRef
                  (QualifiedIdentifier Any n))
                (ExprLitNat 0))
              (ExprBinOp
                "<="
                (ExprVarRef
                  (QualifiedIdentifier Any n))
                (ExprLitNat 14))))
          (StmtVarDeclInit
            (SymDecl
              idx
              (TypeFun
                bits
                (ExprLitNat 37)))
            (ExprCall
              (QualifiedIdentifier Any integerToSBV)
              (list
                (ExprVarRef
                  (QualifiedIdentifier Any n)))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFn)
                (list
                  (ExprLitString "gpr_get")
                  (ExprVarRef
                    (QualifiedIdentifier Any GPRS))
                  (ExprCall
                    (QualifiedIdentifier Any truncate)
                    (list
                      (ExprVarRef
                        (QualifiedIdentifier Any idx))
                      (ExprLitNat 4)))))))))))
  (DefTypeAlias
    simdidx
    (TypeFun
      bits
      (ExprLitNat 8)))
  (DefArray
    SIMDS
    (TypeFun
      bits
      (ExprLitNat 128))
    (IxTypeRef simdidx))
  (DefSetter
    (QualifiedIdentifier Any _V)
    (Just
      (list
        (SetterArg
          n
          (TypeRef
            (QualifiedIdentifier Any integer))
          Value)))
    (SymDecl
      value
      (TypeFun
        bits
        (ExprLitNat 128)))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprBinOp
              "&&"
              (ExprBinOp
                ">="
                (ExprVarRef
                  (QualifiedIdentifier Any n))
                (ExprLitNat 0))
              (ExprBinOp
                "<="
                (ExprVarRef
                  (QualifiedIdentifier Any n))
                (ExprLitNat 31))))
          (StmtVarDeclInit
            (SymDecl
              idx
              (TypeFun
                bits
                (ExprLitNat 37)))
            (ExprCall
              (QualifiedIdentifier Any integerToSBV)
              (list
                (ExprVarRef
                  (QualifiedIdentifier Any n)))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any SIMDS))
            (ExprCall
              (QualifiedIdentifier Any uninterpFn)
              (list
                (ExprLitString "simd_set")
                (ExprVarRef
                  (QualifiedIdentifier Any SIMDS))
                (ExprCall
                  (QualifiedIdentifier Any truncate)
                  (list
                    (ExprVarRef
                      (QualifiedIdentifier Any idx))
                    (ExprLitNat 8)))
                (ExprVarRef
                  (QualifiedIdentifier Any value)))))
          (StmtReturn Nothing)))))
  (DefGetter
    (QualifiedIdentifier Any _V)
    (Just
      (list
        (SymDecl
          n
          (TypeRef
            (QualifiedIdentifier Any integer)))))
    (ReturnType
      (list
        (TypeFun
          bits
          (ExprLitNat 128))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprBinOp
              "&&"
              (ExprBinOp
                ">="
                (ExprVarRef
                  (QualifiedIdentifier Any n))
                (ExprLitNat 0))
              (ExprBinOp
                "<="
                (ExprVarRef
                  (QualifiedIdentifier Any n))
                (ExprLitNat 31))))
          (StmtVarDeclInit
            (SymDecl
              idx
              (TypeFun
                bits
                (ExprLitNat 37)))
            (ExprCall
              (QualifiedIdentifier Any integerToSBV)
              (list
                (ExprVarRef
                  (QualifiedIdentifier Any n)))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFn)
                (list
                  (ExprLitString "simd_get")
                  (ExprVarRef
                    (QualifiedIdentifier Any SIMDS))
                  (ExprCall
                    (QualifiedIdentifier Any truncate)
                    (list
                      (ExprVarRef
                        (QualifiedIdentifier Any idx))
                      (ExprLitNat 8)))))))))))
  (DefVariable
    (QualifiedIdentifier Any _PC)
    (TypeFun
      bits
      (ExprLitNat 32)))
  (DefSetter
    (QualifiedIdentifier Any PC)
    (Just (list))
    (SymDecl
      value
      (TypeFun
        bits
        (ExprLitNat 32)))
    (Just
      (StmtBlock
        (list
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any _PC))
            (ExprVarRef
              (QualifiedIdentifier Any value)))
          (StmtReturn Nothing)))))
  (DefGetter
    (QualifiedIdentifier Any PC)
    (Just (list))
    (ReturnType
      (list
        (TypeFun
          bits
          (ExprLitNat 32))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprVarRef
                (QualifiedIdentifier Any _PC))))))))
  (DefCallable
    (QualifiedIdentifier Any ThisInstrAddr)
    (list)
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtIf
            (ExprBinOp
              "=="
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (ExprLitNat 32))
            (StmtBlock
              (list
                (StmtReturn
                  (Just
                    (ExprIndex
                      (ExprVarRef
                        (QualifiedIdentifier Any PC))
                      (list))))))
            (list)
            (Just
              (StmtBlock
                (list
                  (StmtAssert
                    (ExprVarRef
                      (QualifiedIdentifier Any FALSE)))
                  (StmtReturn
                    (Just
                      (ExprUnknown
                        (TypeFun
                          bits
                          (ExprVarRef
                            (QualifiedIdentifier Any N))))))))))))))
  (DefCallable
    (QualifiedIdentifier Any NextInstrAddr)
    (list)
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtIf
            (ExprBinOp
              "=="
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (ExprLitNat 32))
            (StmtBlock
              (list
                (StmtReturn
                  (Just
                    (ExprSlice
                      (ExprBinOp
                        "+"
                        (ExprVarRef
                          (QualifiedIdentifier Any _PC))
                        (ExprBinOp
                          "DIV"
                          (ExprCall
                            (QualifiedIdentifier Any ThisInstrLength)
                            (list))
                          (ExprLitNat 8)))
                      (list
                        (SliceRange
                          (ExprBinOp
                            "-"
                            (ExprVarRef
                              (QualifiedIdentifier Any N))
                            (ExprLitNat 1))
                          (ExprLitNat 0))))))))
            (list)
            (Just
              (StmtBlock
                (list
                  (StmtAssert
                    (ExprVarRef
                      (QualifiedIdentifier Any FALSE)))
                  (StmtReturn
                    (Just
                      (ExprUnknown
                        (TypeFun
                          bits
                          (ExprVarRef
                            (QualifiedIdentifier Any N))))))))))))))
  (DefCallable
    (QualifiedIdentifier Any BranchToAddr)
    (list
      (SymDecl
        target
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        branch_type
        (TypeRef
          (QualifiedIdentifier Any BranchType))))
    Nothing
    (Just
      (StmtBlock
        (list
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any __BranchTaken))
            (ExprVarRef
              (QualifiedIdentifier Any TRUE)))
          (StmtCall
            (QualifiedIdentifier Any Hint_Branch)
            (list
              (ExprVarRef
                (QualifiedIdentifier Any branch_type))))
          (StmtAssert
            (ExprCall
              (QualifiedIdentifier Any UsingAArch32)
              (list)))
          (StmtIf
            (ExprBinOp
              "=="
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (ExprLitNat 32))
            (StmtBlock
              (list
                (StmtAssign
                  (LValArrayIndex
                    (LValVarRef
                      (QualifiedIdentifier Any PC))
                    (list))
                  (ExprVarRef
                    (QualifiedIdentifier Any target)))
                (StmtReturn Nothing)))
            (list)
            (Just
              (StmtBlock
                (list
                  (StmtAssert
                    (ExprVarRef
                      (QualifiedIdentifier Any FALSE)))
                  (StmtReturn Nothing)))))
          (StmtReturn Nothing)))))
  (DefCallable
    (QualifiedIdentifier Any EndOfInstruction)
    (list)
    Nothing
    (Just
      (StmtBlock
        (list
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any __EndOfInstruction))
            (ExprVarRef
              (QualifiedIdentifier Any TRUE)))
          (StmtReturn Nothing)))))
  (DefCallable
    (QualifiedIdentifier Any ASLSetUndefined)
    (list)
    Nothing
    (Just
      (StmtBlock
        (list
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any __UndefinedBehavior))
            (ExprVarRef
              (QualifiedIdentifier Any TRUE)))
          (StmtReturn Nothing)))))
  (DefCallable
    (QualifiedIdentifier Any ASLSetUnpredictable)
    (list)
    Nothing
    (Just
      (StmtBlock
        (list
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any __UnpredictableBehavior))
            (ExprVarRef
              (QualifiedIdentifier Any TRUE)))
          (StmtReturn Nothing)))))
  (DefVariable
    (QualifiedIdentifier Any __Memory)
    (TypeFun
      __RAM
      (ExprLitNat 32)))
  (DefCallable
    (QualifiedIdentifier Any Mem_Internal_Set)
    (list
      (SymDecl
        address
        (TypeFun
          bits
          (ExprLitNat 32)))
      (SymDecl
        size
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        value
        (TypeFun
          bits
          (ExprBinOp
            "*"
            (ExprLitNat 8)
            (ExprVarRef
              (QualifiedIdentifier Any size))))))
    Nothing
    (Just
      (StmtBlock
        (list
          (StmtCase
            (ExprVarRef
              (QualifiedIdentifier Any size))
            (list
              (CaseAltWhen
                (list
                  (CasePatternNat 1))
                Nothing
                (StmtBlock
                  (list
                    (StmtAssign
                      (LValVarRef
                        (QualifiedIdentifier Any __Memory))
                      (ExprCall
                        (QualifiedIdentifier Any uninterpFn)
                        (list
                          (ExprLitString "write_mem_8")
                          (ExprVarRef
                            (QualifiedIdentifier Any __Memory))
                          (ExprVarRef
                            (QualifiedIdentifier Any address))
                          (ExprVarRef
                            (QualifiedIdentifier Any value))))))))
              (CaseAltWhen
                (list
                  (CasePatternNat 2))
                Nothing
                (StmtBlock
                  (list
                    (StmtAssign
                      (LValVarRef
                        (QualifiedIdentifier Any __Memory))
                      (ExprCall
                        (QualifiedIdentifier Any uninterpFn)
                        (list
                          (ExprLitString "write_mem_16")
                          (ExprVarRef
                            (QualifiedIdentifier Any __Memory))
                          (ExprVarRef
                            (QualifiedIdentifier Any address))
                          (ExprVarRef
                            (QualifiedIdentifier Any value))))))))
              (CaseAltWhen
                (list
                  (CasePatternNat 4))
                Nothing
                (StmtBlock
                  (list
                    (StmtAssign
                      (LValVarRef
                        (QualifiedIdentifier Any __Memory))
                      (ExprCall
                        (QualifiedIdentifier Any uninterpFn)
                        (list
                          (ExprLitString "write_mem_32")
                          (ExprVarRef
                            (QualifiedIdentifier Any __Memory))
                          (ExprVarRef
                            (QualifiedIdentifier Any address))
                          (ExprVarRef
                            (QualifiedIdentifier Any value))))))))
              (CaseAltWhen
                (list
                  (CasePatternNat 8))
                Nothing
                (StmtBlock
                  (list
                    (StmtAssign
                      (LValVarRef
                        (QualifiedIdentifier Any __Memory))
                      (ExprCall
                        (QualifiedIdentifier Any uninterpFn)
                        (list
                          (ExprLitString "write_mem_64")
                          (ExprVarRef
                            (QualifiedIdentifier Any __Memory))
                          (ExprVarRef
                            (QualifiedIdentifier Any address))
                          (ExprVarRef
                            (QualifiedIdentifier Any value))))))))
              (CaseAltOtherwise
                (StmtBlock
                  (list
                    (StmtAssert
                      (ExprVarRef
                        (QualifiedIdentifier Any FALSE))))))))
          (StmtReturn Nothing)))))
  (DefCallable
    (QualifiedIdentifier Any Mem_Internal_Get)
    (list
      (SymDecl
        address
        (TypeFun
          bits
          (ExprLitNat 32)))
      (SymDecl
        size
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprBinOp
              "*"
              (ExprLitNat 8)
              (ExprVarRef
                (QualifiedIdentifier Any size)))))))
    (Just
      (StmtBlock
        (list
          (StmtCase
            (ExprVarRef
              (QualifiedIdentifier Any size))
            (list
              (CaseAltWhen
                (list
                  (CasePatternNat 1))
                Nothing
                (StmtBlock
                  (list
                    (StmtReturn
                      (Just
                        (ExprCall
                          (QualifiedIdentifier Any uninterpFn)
                          (list
                            (ExprLitString "read_mem_8")
                            (ExprVarRef
                              (QualifiedIdentifier Any __Memory))
                            (ExprVarRef
                              (QualifiedIdentifier Any address)))))))))
              (CaseAltWhen
                (list
                  (CasePatternNat 2))
                Nothing
                (StmtBlock
                  (list
                    (StmtReturn
                      (Just
                        (ExprCall
                          (QualifiedIdentifier Any uninterpFn)
                          (list
                            (ExprLitString "read_mem_16")
                            (ExprVarRef
                              (QualifiedIdentifier Any __Memory))
                            (ExprVarRef
                              (QualifiedIdentifier Any address)))))))))
              (CaseAltWhen
                (list
                  (CasePatternNat 4))
                Nothing
                (StmtBlock
                  (list
                    (StmtReturn
                      (Just
                        (ExprCall
                          (QualifiedIdentifier Any uninterpFn)
                          (list
                            (ExprLitString "read_mem_32")
                            (ExprVarRef
                              (QualifiedIdentifier Any __Memory))
                            (ExprVarRef
                              (QualifiedIdentifier Any address)))))))))
              (CaseAltWhen
                (list
                  (CasePatternNat 8))
                Nothing
                (StmtBlock
                  (list
                    (StmtReturn
                      (Just
                        (ExprCall
                          (QualifiedIdentifier Any uninterpFn)
                          (list
                            (ExprLitString "read_mem_64")
                            (ExprVarRef
                              (QualifiedIdentifier Any __Memory))
                            (ExprVarRef
                              (QualifiedIdentifier Any address)))))))))
              (CaseAltOtherwise
                (StmtBlock
                  (list
                    (StmtAssert
                      (ExprVarRef
                        (QualifiedIdentifier Any FALSE)))
                    (StmtReturn
                      (Just
                        (ExprUnknown
                          (TypeFun
                            bits
                            (ExprBinOp
                              "*"
                              (ExprLitNat 8)
                              (ExprVarRef
                                (QualifiedIdentifier Any size))))))))))))))))
  (DefGetter
    (QualifiedIdentifier Any MemA)
    (Just
      (list
        (SymDecl
          address
          (TypeFun
            bits
            (ExprLitNat 32)))
        (SymDecl
          size
          (TypeRef
            (QualifiedIdentifier Any integer)))))
    (ReturnType
      (list
        (TypeFun
          bits
          (ExprBinOp
            "*"
            (ExprLitNat 8)
            (ExprVarRef
              (QualifiedIdentifier Any size))))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any Mem_Internal_Get)
                (list
                  (ExprVarRef
                    (QualifiedIdentifier Any address))
                  (ExprVarRef
                    (QualifiedIdentifier Any size))))))))))
  (DefSetter
    (QualifiedIdentifier Any MemA)
    (Just
      (list
        (SetterArg
          address
          (TypeFun
            bits
            (ExprLitNat 32))
          Value)
        (SetterArg
          size
          (TypeRef
            (QualifiedIdentifier Any integer))
          Value)))
    (SymDecl
      value
      (TypeFun
        bits
        (ExprBinOp
          "*"
          (ExprLitNat 8)
          (ExprVarRef
            (QualifiedIdentifier Any size)))))
    (Just
      (StmtBlock
        (list
          (StmtCall
            (QualifiedIdentifier Any Mem_Internal_Set)
            (list
              (ExprVarRef
                (QualifiedIdentifier Any address))
              (ExprVarRef
                (QualifiedIdentifier Any size))
              (ExprVarRef
                (QualifiedIdentifier Any value))))
          (StmtReturn Nothing)))))
  (DefGetter
    (QualifiedIdentifier Any MemU_unpriv)
    (Just
      (list
        (SymDecl
          address
          (TypeFun
            bits
            (ExprLitNat 32)))
        (SymDecl
          size
          (TypeRef
            (QualifiedIdentifier Any integer)))))
    (ReturnType
      (list
        (TypeFun
          bits
          (ExprBinOp
            "*"
            (ExprLitNat 8)
            (ExprVarRef
              (QualifiedIdentifier Any size))))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any Mem_Internal_Get)
                (list
                  (ExprVarRef
                    (QualifiedIdentifier Any address))
                  (ExprVarRef
                    (QualifiedIdentifier Any size))))))))))
  (DefSetter
    (QualifiedIdentifier Any MemU_unpriv)
    (Just
      (list
        (SetterArg
          address
          (TypeFun
            bits
            (ExprLitNat 32))
          Value)
        (SetterArg
          size
          (TypeRef
            (QualifiedIdentifier Any integer))
          Value)))
    (SymDecl
      value
      (TypeFun
        bits
        (ExprBinOp
          "*"
          (ExprLitNat 8)
          (ExprVarRef
            (QualifiedIdentifier Any size)))))
    (Just
      (StmtBlock
        (list
          (StmtCall
            (QualifiedIdentifier Any Mem_Internal_Set)
            (list
              (ExprVarRef
                (QualifiedIdentifier Any address))
              (ExprVarRef
                (QualifiedIdentifier Any size))
              (ExprVarRef
                (QualifiedIdentifier Any value))))
          (StmtReturn Nothing)))))
  (DefGetter
    (QualifiedIdentifier Any MemU)
    (Just
      (list
        (SymDecl
          address
          (TypeFun
            bits
            (ExprLitNat 32)))
        (SymDecl
          size
          (TypeRef
            (QualifiedIdentifier Any integer)))))
    (ReturnType
      (list
        (TypeFun
          bits
          (ExprBinOp
            "*"
            (ExprLitNat 8)
            (ExprVarRef
              (QualifiedIdentifier Any size))))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any Mem_Internal_Get)
                (list
                  (ExprVarRef
                    (QualifiedIdentifier Any address))
                  (ExprVarRef
                    (QualifiedIdentifier Any size))))))))))
  (DefSetter
    (QualifiedIdentifier Any MemU)
    (Just
      (list
        (SetterArg
          address
          (TypeFun
            bits
            (ExprLitNat 32))
          Value)
        (SetterArg
          size
          (TypeRef
            (QualifiedIdentifier Any integer))
          Value)))
    (SymDecl
      value
      (TypeFun
        bits
        (ExprBinOp
          "*"
          (ExprLitNat 8)
          (ExprVarRef
            (QualifiedIdentifier Any size)))))
    (Just
      (StmtBlock
        (list
          (StmtCall
            (QualifiedIdentifier Any Mem_Internal_Set)
            (list
              (ExprVarRef
                (QualifiedIdentifier Any address))
              (ExprVarRef
                (QualifiedIdentifier Any size))
              (ExprVarRef
                (QualifiedIdentifier Any value))))
          (StmtReturn Nothing)))))
  (DefGetter
    (QualifiedIdentifier Any MemO)
    (Just
      (list
        (SymDecl
          address
          (TypeFun
            bits
            (ExprLitNat 32)))
        (SymDecl
          size
          (TypeRef
            (QualifiedIdentifier Any integer)))))
    (ReturnType
      (list
        (TypeFun
          bits
          (ExprBinOp
            "*"
            (ExprLitNat 8)
            (ExprVarRef
              (QualifiedIdentifier Any size))))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any Mem_Internal_Get)
                (list
                  (ExprVarRef
                    (QualifiedIdentifier Any address))
                  (ExprVarRef
                    (QualifiedIdentifier Any size))))))))))
  (DefSetter
    (QualifiedIdentifier Any MemO)
    (Just
      (list
        (SetterArg
          address
          (TypeFun
            bits
            (ExprLitNat 32))
          Value)
        (SetterArg
          size
          (TypeRef
            (QualifiedIdentifier Any integer))
          Value)))
    (SymDecl
      value
      (TypeFun
        bits
        (ExprBinOp
          "*"
          (ExprLitNat 8)
          (ExprVarRef
            (QualifiedIdentifier Any size)))))
    (Just
      (StmtBlock
        (list
          (StmtCall
            (QualifiedIdentifier Any Mem_Internal_Set)
            (list
              (ExprVarRef
                (QualifiedIdentifier Any address))
              (ExprVarRef
                (QualifiedIdentifier Any size))
              (ExprVarRef
                (QualifiedIdentifier Any value))))
          (StmtReturn Nothing)))))
  (DefGetter
    (QualifiedIdentifier AArch32 MemSingle)
    (Just
      (list
        (SymDecl
          address
          (TypeFun
            bits
            (ExprLitNat 32)))
        (SymDecl
          size
          (TypeRef
            (QualifiedIdentifier Any integer)))
        (SymDecl
          acctype
          (TypeRef
            (QualifiedIdentifier Any AccType)))
        (SymDecl
          wasaligned
          (TypeRef
            (QualifiedIdentifier Any boolean)))))
    (ReturnType
      (list
        (TypeFun
          bits
          (ExprBinOp
            "*"
            (ExprVarRef
              (QualifiedIdentifier Any size))
            (ExprLitNat 8)))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any Mem_Internal_Get)
                (list
                  (ExprVarRef
                    (QualifiedIdentifier Any address))
                  (ExprVarRef
                    (QualifiedIdentifier Any size))))))))))
  (DefSetter
    (QualifiedIdentifier AArch32 MemSingle)
    (Just
      (list
        (SetterArg
          address
          (TypeFun
            bits
            (ExprLitNat 32))
          Value)
        (SetterArg
          size
          (TypeRef
            (QualifiedIdentifier Any integer))
          Value)
        (SetterArg
          acctype
          (TypeRef
            (QualifiedIdentifier Any AccType))
          Value)
        (SetterArg
          wasaligned
          (TypeRef
            (QualifiedIdentifier Any boolean))
          Value)))
    (SymDecl
      value
      (TypeFun
        bits
        (ExprBinOp
          "*"
          (ExprVarRef
            (QualifiedIdentifier Any size))
          (ExprLitNat 8))))
    (Just
      (StmtBlock
        (list
          (StmtCall
            (QualifiedIdentifier Any Mem_Internal_Set)
            (list
              (ExprVarRef
                (QualifiedIdentifier Any address))
              (ExprVarRef
                (QualifiedIdentifier Any size))
              (ExprVarRef
                (QualifiedIdentifier Any value))))
          (StmtReturn Nothing)))))
  (DefCallable
    (QualifiedIdentifier Any CheckAdvSIMDEnabled)
    (list)
    Nothing
    (Just
      (StmtBlock
        (list
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any fpexc_check))
            (ExprVarRef
              (QualifiedIdentifier Any TRUE)))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any advsimd))
            (ExprVarRef
              (QualifiedIdentifier Any TRUE)))
          (StmtCall
            (QualifiedIdentifier AArch32 CheckAdvSIMDOrFPEnabled)
            (list
              (ExprVarRef
                (QualifiedIdentifier Any fpexc_check))
              (ExprVarRef
                (QualifiedIdentifier Any advsimd))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any SIMDS_clone))
            (ExprVarRef
              (QualifiedIdentifier Any SIMDS)))
          (StmtReturn Nothing)))))
  (DefArray
    SIMDS_clone
    (TypeFun
      bits
      (ExprLitNat 128))
    (IxTypeRef simdidx))
  (DefGetter
    (QualifiedIdentifier Any Din)
    (Just
      (list
        (SymDecl
          n
          (TypeRef
            (QualifiedIdentifier Any integer)))))
    (ReturnType
      (list
        (TypeFun
          bits
          (ExprLitNat 64))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprBinOp
              "&&"
              (ExprBinOp
                ">="
                (ExprVarRef
                  (QualifiedIdentifier Any n))
                (ExprLitNat 0))
              (ExprBinOp
                "<="
                (ExprVarRef
                  (QualifiedIdentifier Any n))
                (ExprLitNat 31))))
          (StmtVarDeclInit
            (SymDecl
              idx
              (TypeFun
                bits
                (ExprLitNat 37)))
            (ExprCall
              (QualifiedIdentifier Any integerToSBV)
              (list
                (ExprBinOp
                  "DIV"
                  (ExprVarRef
                    (QualifiedIdentifier Any n))
                  (ExprLitNat 2)))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any base))
            (ExprBinOp
              "*"
              (ExprBinOp
                "MOD"
                (ExprVarRef
                  (QualifiedIdentifier Any n))
                (ExprLitNat 2))
              (ExprLitNat 64)))
          (StmtVarDeclInit
            (SymDecl
              result
              (TypeFun
                bits
                (ExprLitNat 128)))
            (ExprCall
              (QualifiedIdentifier Any uninterpFn)
              (list
                (ExprLitString "simd_get")
                (ExprVarRef
                  (QualifiedIdentifier Any SIMDS_clone))
                (ExprCall
                  (QualifiedIdentifier Any truncate)
                  (list
                    (ExprVarRef
                      (QualifiedIdentifier Any idx))
                    (ExprLitNat 8))))))
          (StmtReturn
            (Just
              (ExprSlice
                (ExprVarRef
                  (QualifiedIdentifier Any result))
                (list
                  (SliceRange
                    (ExprBinOp
                      "+"
                      (ExprVarRef
                        (QualifiedIdentifier Any base))
                      (ExprLitNat 63))
                    (ExprVarRef
                      (QualifiedIdentifier Any base)))))))))))
  (DefCallable
    (QualifiedIdentifier AArch32 ExclusiveMonitorsPass)
    (list
      (SymDecl
        address
        (TypeFun
          bits
          (ExprLitNat 32)))
      (SymDecl
        size
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any boolean)))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprVarRef
                (QualifiedIdentifier Any FALSE))))))))
  (DefCallable
    (QualifiedIdentifier AArch32 SetExclusiveMonitors)
    (list
      (SymDecl
        address
        (TypeFun
          bits
          (ExprLitNat 32)))
      (SymDecl
        size
        (TypeRef
          (QualifiedIdentifier Any integer))))
    Nothing
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprVarRef
              (QualifiedIdentifier Any FALSE)))
          (StmtReturn Nothing)))))
  (DefConst
    LOG2_TAG_GRANULE
    (TypeRef
      (QualifiedIdentifier Any integer))
    (ExprLitNat 4))
  (DefConst
    TAG_GRANULE
    (TypeRef
      (QualifiedIdentifier Any integer))
    (ExprBinOp
      "^"
      (ExprLitNat 2)
      (ExprVarRef
        (QualifiedIdentifier Any LOG2_TAG_GRANULE))))
  (DefCallable
    (QualifiedIdentifier Any Replicate)
    (list
      (SymDecl
        bv
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N)))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprBinOp
              "*"
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (ExprVarRef
                (QualifiedIdentifier Any M)))))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any Replicate)
                (list
                  (ExprVarRef
                    (QualifiedIdentifier Any bv))
                  (ExprVarRef
                    (QualifiedIdentifier Any M))))))))))
  (DefCallable
    (QualifiedIdentifier Any sizeOf)
    (list
      (SymDecl
        bv
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N)))))
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any integer)))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprVarRef
                (QualifiedIdentifier Any N))))))))
  (DefCallable
    (QualifiedIdentifier Any BigEndianReverse)
    (list
      (SymDecl
        value
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any width)))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any width))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any width))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 8))
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))
                  (SetElementSingle
                    (ExprLitNat 128))))))
          (StmtVarDeclInit
            (SymDecl
              half
              (TypeRef
                (QualifiedIdentifier Any integer)))
            (ExprBinOp
              "DIV"
              (ExprVarRef
                (QualifiedIdentifier Any width))
              (ExprLitNat 2)))
          (StmtCall
            (QualifiedIdentifier Any StaticBind)
            (list
              (ExprVarRef
                (QualifiedIdentifier Any half))
              (ExprBinOp
                "DIV"
                (ExprVarRef
                  (QualifiedIdentifier Any width))
                (ExprLitNat 2))))
          (StmtIf
            (ExprBinOp
              "=="
              (ExprVarRef
                (QualifiedIdentifier Any width))
              (ExprLitNat 8))
            (StmtBlock
              (list
                (StmtReturn
                  (Just
                    (ExprVarRef
                      (QualifiedIdentifier Any value))))))
            (list)
            Nothing)
          (StmtReturn
            (Just
              (ExprBinOp
                ":"
                (ExprCall
                  (QualifiedIdentifier Any BigEndianReverse)
                  (list
                    (ExprSlice
                      (ExprVarRef
                        (QualifiedIdentifier Any value))
                      (list
                        (SliceRange
                          (ExprBinOp
                            "-"
                            (ExprVarRef
                              (QualifiedIdentifier Any half))
                            (ExprLitNat 1))
                          (ExprLitNat 0))))))
                (ExprCall
                  (QualifiedIdentifier Any BigEndianReverse)
                  (list
                    (ExprSlice
                      (ExprVarRef
                        (QualifiedIdentifier Any value))
                      (list
                        (SliceRange
                          (ExprBinOp
                            "-"
                            (ExprVarRef
                              (QualifiedIdentifier Any width))
                            (ExprLitNat 1))
                          (ExprVarRef
                            (QualifiedIdentifier Any half))))))))))))))
  (DefCallable
    (QualifiedIdentifier Any LSL_C)
    (list
      (SymDecl
        x
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        shift
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N)))
          (TypeRef
            (QualifiedIdentifier Any bit)))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprBinOp
              ">"
              (ExprVarRef
                (QualifiedIdentifier Any shift))
              (ExprLitNat 0)))
          (StmtCall
            (QualifiedIdentifier Any integerSizeBoundS)
            (list
              (ExprVarRef
                (QualifiedIdentifier Any shift))
              (ExprVarRef
                (QualifiedIdentifier Any x))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any shift))
            (ExprIf
              (ExprBinOp
                ">"
                (ExprVarRef
                  (QualifiedIdentifier Any shift))
                (ExprVarRef
                  (QualifiedIdentifier Any N)))
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (list)
              (ExprVarRef
                (QualifiedIdentifier Any shift))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any carry_out))
            (ExprSlice
              (ExprVarRef
                (QualifiedIdentifier Any x))
              (list
                (SliceSingle
                  (ExprBinOp
                    "-"
                    (ExprVarRef
                      (QualifiedIdentifier Any N))
                    (ExprVarRef
                      (QualifiedIdentifier Any shift)))))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any result))
            (ExprCall
              (QualifiedIdentifier Any LSL)
              (list
                (ExprVarRef
                  (QualifiedIdentifier Any x))
                (ExprVarRef
                  (QualifiedIdentifier Any shift)))))
          (StmtReturn
            (Just
              (ExprTuple
                (list
                  (ExprVarRef
                    (QualifiedIdentifier Any result))
                  (ExprVarRef
                    (QualifiedIdentifier Any carry_out))))))))))
  (DefCallable
    (QualifiedIdentifier Any LSL)
    (list
      (SymDecl
        x
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        shift
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprBinOp
              ">="
              (ExprVarRef
                (QualifiedIdentifier Any shift))
              (ExprLitNat 0)))
          (StmtCall
            (QualifiedIdentifier Any integerSizeBoundS)
            (list
              (ExprVarRef
                (QualifiedIdentifier Any shift))
              (ExprVarRef
                (QualifiedIdentifier Any x))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any shift))
            (ExprIf
              (ExprBinOp
                ">"
                (ExprVarRef
                  (QualifiedIdentifier Any shift))
                (ExprVarRef
                  (QualifiedIdentifier Any N)))
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (list)
              (ExprVarRef
                (QualifiedIdentifier Any shift))))
          (StmtIf
            (ExprBinOp
              "=="
              (ExprVarRef
                (QualifiedIdentifier Any shift))
              (ExprLitNat 0))
            (StmtBlock
              (list
                (StmtAssign
                  (LValVarRef
                    (QualifiedIdentifier Any result))
                  (ExprVarRef
                    (QualifiedIdentifier Any x)))))
            (list)
            (Just
              (StmtBlock
                (list
                  (StmtAssign
                    (LValVarRef
                      (QualifiedIdentifier Any result))
                    (ExprBinOp
                      "<<"
                      (ExprVarRef
                        (QualifiedIdentifier Any x))
                      (ExprVarRef
                        (QualifiedIdentifier Any shift))))))))
          (StmtReturn
            (Just
              (ExprVarRef
                (QualifiedIdentifier Any result))))))))
  (DefCallable
    (QualifiedIdentifier Any LSR_C)
    (list
      (SymDecl
        x
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        shift
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N)))
          (TypeRef
            (QualifiedIdentifier Any bit)))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprBinOp
              ">"
              (ExprVarRef
                (QualifiedIdentifier Any shift))
              (ExprLitNat 0)))
          (StmtCall
            (QualifiedIdentifier Any integerSizeBoundS)
            (list
              (ExprVarRef
                (QualifiedIdentifier Any shift))
              (ExprVarRef
                (QualifiedIdentifier Any x))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any shift))
            (ExprIf
              (ExprBinOp
                ">"
                (ExprVarRef
                  (QualifiedIdentifier Any shift))
                (ExprVarRef
                  (QualifiedIdentifier Any N)))
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (list)
              (ExprVarRef
                (QualifiedIdentifier Any shift))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any carry_out))
            (ExprSlice
              (ExprVarRef
                (QualifiedIdentifier Any x))
              (list
                (SliceSingle
                  (ExprBinOp
                    "-"
                    (ExprVarRef
                      (QualifiedIdentifier Any shift))
                    (ExprLitNat 1))))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any result))
            (ExprCall
              (QualifiedIdentifier Any LSR)
              (list
                (ExprVarRef
                  (QualifiedIdentifier Any x))
                (ExprVarRef
                  (QualifiedIdentifier Any shift)))))
          (StmtReturn
            (Just
              (ExprTuple
                (list
                  (ExprVarRef
                    (QualifiedIdentifier Any result))
                  (ExprVarRef
                    (QualifiedIdentifier Any carry_out))))))))))
  (DefCallable
    (QualifiedIdentifier Any LSR)
    (list
      (SymDecl
        x
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        shift
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprBinOp
              ">="
              (ExprVarRef
                (QualifiedIdentifier Any shift))
              (ExprLitNat 0)))
          (StmtCall
            (QualifiedIdentifier Any integerSizeBoundS)
            (list
              (ExprVarRef
                (QualifiedIdentifier Any shift))
              (ExprVarRef
                (QualifiedIdentifier Any x))))
          (StmtIf
            (ExprBinOp
              "=="
              (ExprVarRef
                (QualifiedIdentifier Any shift))
              (ExprLitNat 0))
            (StmtBlock
              (list
                (StmtAssign
                  (LValVarRef
                    (QualifiedIdentifier Any result))
                  (ExprVarRef
                    (QualifiedIdentifier Any x)))))
            (list)
            (Just
              (StmtBlock
                (list
                  (StmtAssign
                    (LValVarRef
                      (QualifiedIdentifier Any result))
                    (ExprBinOp
                      ">>"
                      (ExprVarRef
                        (QualifiedIdentifier Any x))
                      (ExprVarRef
                        (QualifiedIdentifier Any shift))))))))
          (StmtReturn
            (Just
              (ExprVarRef
                (QualifiedIdentifier Any result))))))))
  (DefCallable
    (QualifiedIdentifier Any ASR_C)
    (list
      (SymDecl
        x
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        shift
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N)))
          (TypeRef
            (QualifiedIdentifier Any bit)))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprBinOp
              ">"
              (ExprVarRef
                (QualifiedIdentifier Any shift))
              (ExprLitNat 0)))
          (StmtCall
            (QualifiedIdentifier Any integerSizeBoundS)
            (list
              (ExprVarRef
                (QualifiedIdentifier Any shift))
              (ExprVarRef
                (QualifiedIdentifier Any x))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any shift))
            (ExprIf
              (ExprBinOp
                ">"
                (ExprVarRef
                  (QualifiedIdentifier Any shift))
                (ExprVarRef
                  (QualifiedIdentifier Any N)))
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (list)
              (ExprVarRef
                (QualifiedIdentifier Any shift))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any carry_out))
            (ExprSlice
              (ExprVarRef
                (QualifiedIdentifier Any x))
              (list
                (SliceSingle
                  (ExprBinOp
                    "-"
                    (ExprVarRef
                      (QualifiedIdentifier Any shift))
                    (ExprLitNat 1))))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any result))
            (ExprCall
              (QualifiedIdentifier Any ASR)
              (list
                (ExprVarRef
                  (QualifiedIdentifier Any x))
                (ExprVarRef
                  (QualifiedIdentifier Any shift)))))
          (StmtReturn
            (Just
              (ExprTuple
                (list
                  (ExprVarRef
                    (QualifiedIdentifier Any result))
                  (ExprVarRef
                    (QualifiedIdentifier Any carry_out))))))))))
  (DefCallable
    (QualifiedIdentifier Any ASR)
    (list
      (SymDecl
        x
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        shift
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprBinOp
              ">="
              (ExprVarRef
                (QualifiedIdentifier Any shift))
              (ExprLitNat 0)))
          (StmtCall
            (QualifiedIdentifier Any integerSizeBoundS)
            (list
              (ExprVarRef
                (QualifiedIdentifier Any shift))
              (ExprVarRef
                (QualifiedIdentifier Any x))))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any shift))
            (ExprIf
              (ExprBinOp
                ">"
                (ExprVarRef
                  (QualifiedIdentifier Any shift))
                (ExprVarRef
                  (QualifiedIdentifier Any N)))
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (list)
              (ExprVarRef
                (QualifiedIdentifier Any shift))))
          (StmtIf
            (ExprBinOp
              "=="
              (ExprVarRef
                (QualifiedIdentifier Any shift))
              (ExprLitNat 0))
            (StmtBlock
              (list
                (StmtAssign
                  (LValVarRef
                    (QualifiedIdentifier Any result))
                  (ExprVarRef
                    (QualifiedIdentifier Any x)))))
            (list)
            (Just
              (StmtBlock
                (list
                  (StmtAssign
                    (LValVarRef
                      (QualifiedIdentifier Any result))
                    (ExprCall
                      (QualifiedIdentifier Any primitive_ASR)
                      (list
                        (ExprVarRef
                          (QualifiedIdentifier Any x))
                        (ExprVarRef
                          (QualifiedIdentifier Any shift)))))))))
          (StmtReturn
            (Just
              (ExprVarRef
                (QualifiedIdentifier Any result))))))))
  (DefCallable
    (QualifiedIdentifier Any UnsignedRSqrtEstimate)
    (list
      (SymDecl
        operand
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N)))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "unsignedRSqrtEstimate")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any operand))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPAdd)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpAdd")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPCompareUN)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any boolean)))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpCompareUN")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPMin)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpMin")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPProcess)
    (list
      (SymDecl
        input
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N)))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpProcess")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any input))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPCompareNE)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any boolean)))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpCompareNE")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPCompareGT)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any boolean)))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 8))
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpCompareGT")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPSub)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpSub")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPToFixed)
    (list
      (SymDecl
        op
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fbits
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        unsigned
        (TypeRef
          (QualifiedIdentifier Any boolean)))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType)))
      (SymDecl
        rounding
        (TypeRef
          (QualifiedIdentifier Any FPRounding))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any M))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any M))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtAssert
            (ExprBinOp
              ">="
              (ExprVarRef
                (QualifiedIdentifier Any fbits))
              (ExprLitNat 0)))
          (StmtAssert
            (ExprBinOp
              "!="
              (ExprVarRef
                (QualifiedIdentifier Any rounding))
              (ExprVarRef
                (QualifiedIdentifier Any FPRounding_ODD))))
          (StmtVarDeclInit
            (SymDecl
              fbitsB
              (TypeFun
                bits
                (ExprLitNat 32)))
            (ExprCall
              (QualifiedIdentifier Any integerToSBV)
              (list
                (ExprVarRef
                  (QualifiedIdentifier Any fbits)))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpToFixed")
                  (ExprLitNat 2)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any M))
                  (ExprVarRef
                    (QualifiedIdentifier Any op))
                  (ExprVarRef
                    (QualifiedIdentifier Any fbitsB))
                  (ExprVarRef
                    (QualifiedIdentifier Any unsigned))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))
                  (ExprVarRef
                    (QualifiedIdentifier Any rounding))))))))))
  (DefCallable
    (QualifiedIdentifier Any FixedToFP)
    (list
      (SymDecl
        op
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any M))))
      (SymDecl
        fbits
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        unsigned
        (TypeRef
          (QualifiedIdentifier Any boolean)))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType)))
      (SymDecl
        rounding
        (TypeRef
          (QualifiedIdentifier Any FPRounding))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any M))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtAssert
            (ExprBinOp
              ">="
              (ExprVarRef
                (QualifiedIdentifier Any fbits))
              (ExprLitNat 0)))
          (StmtAssert
            (ExprBinOp
              "!="
              (ExprVarRef
                (QualifiedIdentifier Any rounding))
              (ExprVarRef
                (QualifiedIdentifier Any FPRounding_ODD))))
          (StmtVarDeclInit
            (SymDecl
              fbitsB
              (TypeFun
                bits
                (ExprLitNat 32)))
            (ExprCall
              (QualifiedIdentifier Any integerToSBV)
              (list
                (ExprVarRef
                  (QualifiedIdentifier Any fbits)))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fixedToFP")
                  (ExprLitNat 2)
                  (ExprVarRef
                    (QualifiedIdentifier Any M))
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op))
                  (ExprVarRef
                    (QualifiedIdentifier Any fbitsB))
                  (ExprVarRef
                    (QualifiedIdentifier Any unsigned))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))
                  (ExprVarRef
                    (QualifiedIdentifier Any rounding))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPRecpX)
    (list
      (SymDecl
        op
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpRecpX")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPMul)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpMul")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPRecipStep)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N)))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpRecipStep")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPMulAddH)
    (list
      (SymDecl
        addend
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any M))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any M))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtAssert
            (ExprBinOp
              "=="
              (ExprVarRef
                (QualifiedIdentifier Any M))
              (ExprBinOp
                "DIV"
                (ExprVarRef
                  (QualifiedIdentifier Any N))
                (ExprLitNat 2))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpMulAddH")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPMinNum)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpMinNum")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPMax)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpMax")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPMaxNum)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpMaxNum")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPScale)
    (list
      (SymDecl
        op
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        scale
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtVarDeclInit
            (SymDecl
              scaleB
              (TypeFun
                bits
                (ExprLitNat 32)))
            (ExprCall
              (QualifiedIdentifier Any integerToSBV)
              (list
                (ExprVarRef
                  (QualifiedIdentifier Any scale)))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpScale")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op))
                  (ExprVarRef
                    (QualifiedIdentifier Any scaleB))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPRoundIntN)
    (list
      (SymDecl
        op
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType)))
      (SymDecl
        rounding
        (TypeRef
          (QualifiedIdentifier Any FPRounding)))
      (SymDecl
        intsize
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprBinOp
              "!="
              (ExprVarRef
                (QualifiedIdentifier Any rounding))
              (ExprVarRef
                (QualifiedIdentifier Any FPRounding_ODD))))
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtVarDeclInit
            (SymDecl
              intsizeB
              (TypeFun
                bits
                (ExprLitNat 32)))
            (ExprCall
              (QualifiedIdentifier Any integerToSBV)
              (list
                (ExprVarRef
                  (QualifiedIdentifier Any intsize)))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpRoundIntN")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))
                  (ExprVarRef
                    (QualifiedIdentifier Any rounding))
                  (ExprVarRef
                    (QualifiedIdentifier Any intsizeB))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPCompare)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        signal_nans
        (TypeRef
          (QualifiedIdentifier Any boolean)))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprLitNat 4)))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpCompare")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))
                  (ExprVarRef
                    (QualifiedIdentifier Any signal_nans))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPCompareGE)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any boolean)))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 8))
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpCompareGE")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPRSqrtStepFused)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N)))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fprSqrtStepFused")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPCompareEQ)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any boolean)))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpCompareEQ")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPRecipEstimate)
    (list
      (SymDecl
        operand
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpRecipEstimate")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any operand))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPSqrt)
    (list
      (SymDecl
        op
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpSqrt")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPConvert)
    (list
      (SymDecl
        op
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType)))
      (SymDecl
        rounding
        (TypeRef
          (QualifiedIdentifier Any FPRounding))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any M))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any M))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpConvert")
                  (ExprLitNat 2)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any M))
                  (ExprVarRef
                    (QualifiedIdentifier Any op))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))
                  (ExprVarRef
                    (QualifiedIdentifier Any rounding))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPDiv)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpDiv")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPRSqrtEstimate)
    (list
      (SymDecl
        operand
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpSqrtEstimate")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any operand))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPTrigSMul)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpTrigSMul")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPHalvedSub)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpHalvedSub")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPRSqrtStep)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N)))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fprSqrtStep")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPMulAdd)
    (list
      (SymDecl
        addend
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpMulAdd")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any addend))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPRecipStepFused)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N)))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpRecipStepFused")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPToFixedJS)
    (list
      (SymDecl
        op
        (TypeFun
          bits
          (ExprLitNat 64)))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType)))
      (SymDecl
        Is64
        (TypeRef
          (QualifiedIdentifier Any boolean))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprLitNat 32)))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFn)
                (list
                  (ExprLitString "fpToFixedJS")
                  (ExprVarRef
                    (QualifiedIdentifier Any op))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))
                  (ExprVarRef
                    (QualifiedIdentifier Any Is64))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPMulX)
    (list
      (SymDecl
        op1
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        op2
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpMulX")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op1))
                  (ExprVarRef
                    (QualifiedIdentifier Any op2))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))))))))))
  (DefCallable
    (QualifiedIdentifier Any FPRoundInt)
    (list
      (SymDecl
        op
        (TypeFun
          bits
          (ExprVarRef
            (QualifiedIdentifier Any N))))
      (SymDecl
        fpcr
        (TypeRef
          (QualifiedIdentifier Any FPCRType)))
      (SymDecl
        rounding
        (TypeRef
          (QualifiedIdentifier Any FPRounding)))
      (SymDecl
        exact
        (TypeRef
          (QualifiedIdentifier Any boolean))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprVarRef
              (QualifiedIdentifier Any N))))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprBinOp
              "!="
              (ExprVarRef
                (QualifiedIdentifier Any rounding))
              (ExprVarRef
                (QualifiedIdentifier Any FPRounding_ODD))))
          (StmtAssert
            (ExprInSet
              (ExprVarRef
                (QualifiedIdentifier Any N))
              (Set
                (list
                  (SetElementSingle
                    (ExprLitNat 16))
                  (SetElementSingle
                    (ExprLitNat 32))
                  (SetElementSingle
                    (ExprLitNat 64))))))
          (StmtReturn
            (Just
              (ExprCall
                (QualifiedIdentifier Any uninterpFnN)
                (list
                  (ExprLitString "fpRoundInt")
                  (ExprLitNat 1)
                  (ExprVarRef
                    (QualifiedIdentifier Any N))
                  (ExprVarRef
                    (QualifiedIdentifier Any op))
                  (ExprVarRef
                    (QualifiedIdentifier Any fpcr))
                  (ExprVarRef
                    (QualifiedIdentifier Any rounding))
                  (ExprVarRef
                    (QualifiedIdentifier Any exact))))))))))
  (DefCallable
    (QualifiedIdentifier AArch64 TranslationTableWalk)
    (list
      (SymDecl
        ipaddress
        (TypeFun
          bits
          (ExprLitNat 52)))
      (SymDecl
        s1_nonsecure
        (TypeRef
          (QualifiedIdentifier Any bit)))
      (SymDecl
        vaddress
        (TypeFun
          bits
          (ExprLitNat 64)))
      (SymDecl
        acctype
        (TypeRef
          (QualifiedIdentifier Any AccType)))
      (SymDecl
        iswrite
        (TypeRef
          (QualifiedIdentifier Any boolean)))
      (SymDecl
        secondstage
        (TypeRef
          (QualifiedIdentifier Any boolean)))
      (SymDecl
        s2fs1walk
        (TypeRef
          (QualifiedIdentifier Any boolean)))
      (SymDecl
        size
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any TLBRecord)))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprVarRef
              (QualifiedIdentifier Any FALSE)))
          (StmtVarsDecl
            (list result)
            (TypeRef
              (QualifiedIdentifier Any TLBRecord)))
          (StmtReturn
            (Just
              (ExprVarRef
                (QualifiedIdentifier Any result))))))))
  (DefCallable
    (QualifiedIdentifier AArch32 TranslationTableWalkLD)
    (list
      (SymDecl
        ipaddress
        (TypeFun
          bits
          (ExprLitNat 40)))
      (SymDecl
        vaddress
        (TypeFun
          bits
          (ExprLitNat 32)))
      (SymDecl
        acctype
        (TypeRef
          (QualifiedIdentifier Any AccType)))
      (SymDecl
        iswrite
        (TypeRef
          (QualifiedIdentifier Any boolean)))
      (SymDecl
        secondstage
        (TypeRef
          (QualifiedIdentifier Any boolean)))
      (SymDecl
        s2fs1walk
        (TypeRef
          (QualifiedIdentifier Any boolean)))
      (SymDecl
        size
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any TLBRecord)))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprVarRef
              (QualifiedIdentifier Any FALSE)))
          (StmtVarsDecl
            (list result)
            (TypeRef
              (QualifiedIdentifier Any TLBRecord)))
          (StmtReturn
            (Just
              (ExprVarRef
                (QualifiedIdentifier Any result))))))))
  (DefCallable
    (QualifiedIdentifier AArch32 TranslationTableWalkSD)
    (list
      (SymDecl
        vaddress
        (TypeFun
          bits
          (ExprLitNat 32)))
      (SymDecl
        acctype
        (TypeRef
          (QualifiedIdentifier Any AccType)))
      (SymDecl
        iswrite
        (TypeRef
          (QualifiedIdentifier Any boolean)))
      (SymDecl
        size
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any TLBRecord)))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprVarRef
              (QualifiedIdentifier Any FALSE)))
          (StmtVarsDecl
            (list result)
            (TypeRef
              (QualifiedIdentifier Any TLBRecord)))
          (StmtReturn
            (Just
              (ExprVarRef
                (QualifiedIdentifier Any result))))))))
  (DefCallable
    (QualifiedIdentifier Any DCPSInstruction)
    (list
      (SymDecl
        target_el
        (TypeFun
          bits
          (ExprLitNat 2))))
    Nothing
    (Just
      (StmtBlock
        (list
          (StmtReturn Nothing)))))
  (DefCallable
    (QualifiedIdentifier Any ConsumptionOfSpeculativeDataBarrier)
    (list)
    Nothing
    (Just
      (StmtBlock
        (list
          (StmtReturn Nothing)))))
  (DefCallable
    (QualifiedIdentifier Any SpeculativeStoreBypassBarrierToPA)
    (list)
    Nothing
    (Just
      (StmtBlock
        (list
          (StmtReturn Nothing)))))
  (DefCallable
    (QualifiedIdentifier Any SpeculationBarrier)
    (list)
    Nothing
    (Just
      (StmtBlock
        (list
          (StmtReturn Nothing)))))
  (DefCallable
    (QualifiedIdentifier Any SpeculativeStoreBypassBarrierToVA)
    (list)
    Nothing
    (Just
      (StmtBlock
        (list
          (StmtReturn Nothing)))))
  (DefCallable
    (QualifiedIdentifier Any SynchronizeErrors)
    (list)
    Nothing
    (Just
      (StmtBlock
        (list
          (StmtReturn Nothing)))))
  (DefCallable
    (QualifiedIdentifier AArch64 SysRegRead)
    (list
      (SymDecl
        op0
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        op1
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        crn
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        crm
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        op2
        (TypeRef
          (QualifiedIdentifier Any integer))))
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprLitNat 64)))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprVarRef
              (QualifiedIdentifier Any FALSE)))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any reg))
            (ExprUnknown
              (TypeFun
                bits
                (ExprLitNat 64))))
          (StmtReturn
            (Just
              (ExprVarRef
                (QualifiedIdentifier Any reg))))))))
  (DefCallable
    (QualifiedIdentifier Any ReservedEncoding)
    (list)
    Nothing
    (Just
      (StmtBlock
        (list
          (StmtReturn Nothing)))))
  (DefCallable
    (QualifiedIdentifier Any IsPhysicalSErrorPending)
    (list)
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any boolean)))))
    (Just
      (StmtBlock
        (list
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any ret))
            (ExprUnknown
              (TypeRef
                (QualifiedIdentifier Any boolean))))
          (StmtReturn
            (Just
              (ExprVarRef
                (QualifiedIdentifier Any ret))))))))
  (DefCallable
    (QualifiedIdentifier AArch32 BreakpointValueMatch)
    (list
      (SymDecl
        n
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        vaddress
        (TypeFun
          bits
          (ExprLitNat 32)))
      (SymDecl
        linked_to
        (TypeRef
          (QualifiedIdentifier Any boolean))))
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any boolean))
          (TypeRef
            (QualifiedIdentifier Any boolean)))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprTuple
                (list
                  (ExprVarRef
                    (QualifiedIdentifier Any FALSE))
                  (ExprVarRef
                    (QualifiedIdentifier Any FALSE))))))))))
  (DefCallable
    (QualifiedIdentifier AArch64 BreakpointValueMatch)
    (list
      (SymDecl
        n
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        vaddress
        (TypeFun
          bits
          (ExprLitNat 64)))
      (SymDecl
        linked_to
        (TypeRef
          (QualifiedIdentifier Any boolean))))
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any boolean)))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprVarRef
                (QualifiedIdentifier Any FALSE))))))))
  (DefCallable
    (QualifiedIdentifier Any IsBlockDescriptorNTBitValid)
    (list)
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any boolean)))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprVarRef
                (QualifiedIdentifier Any FALSE))))))))
  (DefCallable
    (QualifiedIdentifier Any LSInstructionSyndrome)
    (list)
    (Just
      (ReturnType
        (list
          (TypeFun
            bits
            (ExprLitNat 11)))))
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprVarRef
              (QualifiedIdentifier Any FALSE)))
          (StmtAssign
            (LValVarRef
              (QualifiedIdentifier Any ret))
            (ExprUnknown
              (TypeFun
                bits
                (ExprLitNat 11))))
          (StmtReturn
            (Just
              (ExprVarRef
                (QualifiedIdentifier Any ret))))))))
  (DefCallable
    (QualifiedIdentifier Any TraceSynchronizationBarrier)
    (list)
    Nothing
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprVarRef
              (QualifiedIdentifier Any FALSE)))
          (StmtReturn Nothing)))))
  (DefCallable
    (QualifiedIdentifier Any __abort)
    (list)
    Nothing
    (Just
      (StmtBlock
        (list
          (StmtAssert
            (ExprVarRef
              (QualifiedIdentifier Any FALSE)))
          (StmtReturn Nothing)))))
  (DefCallable
    (QualifiedIdentifier AArch32 WatchpointMatch)
    (list
      (SymDecl
        n
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        vaddress
        (TypeFun
          bits
          (ExprLitNat 32)))
      (SymDecl
        size
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        ispriv
        (TypeRef
          (QualifiedIdentifier Any boolean)))
      (SymDecl
        iswrite
        (TypeRef
          (QualifiedIdentifier Any boolean))))
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any boolean)))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprVarRef
                (QualifiedIdentifier Any FALSE))))))))
  (DefCallable
    (QualifiedIdentifier AArch64 WatchpointMatch)
    (list
      (SymDecl
        n
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        vaddress
        (TypeFun
          bits
          (ExprLitNat 64)))
      (SymDecl
        size
        (TypeRef
          (QualifiedIdentifier Any integer)))
      (SymDecl
        ispriv
        (TypeRef
          (QualifiedIdentifier Any boolean)))
      (SymDecl
        acctype
        (TypeRef
          (QualifiedIdentifier Any AccType)))
      (SymDecl
        iswrite
        (TypeRef
          (QualifiedIdentifier Any boolean))))
    (Just
      (ReturnType
        (list
          (TypeRef
            (QualifiedIdentifier Any boolean)))))
    (Just
      (StmtBlock
        (list
          (StmtReturn
            (Just
              (ExprVarRef
                (QualifiedIdentifier Any FALSE)))))))))